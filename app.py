from flask import Flask, session, redirect, url_for
from app.config import Config
from app.models import db
from app.api.auth import auth_bp
from app.api.teachers import teacher_bp

def create_app():
    app = Flask(__name__)
    app.config.from_object(Config)

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏
    db.init_app(app)

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤
    app.register_blueprint(auth_bp)
    app.register_blueprint(teacher_bp)

    # –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ ‚Üí —Ñ–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    @app.route('/')
    def index():
        return redirect(url_for('auth.login'))

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –≤—Ö–æ–¥—É –∑–∞ —Ä–æ–ª–ª—é
    @app.route('/redirect-by-role')
    def redirect_by_role():
        if 'user_id' not in session or 'role' not in session:
            return redirect(url_for('auth.login'))

        role = session['role']

        if role == 'teacher':
            return redirect(url_for('teacher.dashboard'))
        elif role == 'admin':
            return 'üëë –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)'
        elif role == 'student':
            return 'üéì –ü–∞–Ω–µ–ª—å —É—á–Ω—è (–∑–∞–≥–ª—É—à–∫–∞)'
        elif role == 'parent':
            return 'üë™ –ü–∞–Ω–µ–ª—å –±–∞—Ç—å–∫—ñ–≤ (–∑–∞–≥–ª—É—à–∫–∞)'
        else:
            return '‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ —Ä–æ–ª—å'

    return app

# –î–ª—è –∑–∞–ø—É—Å–∫—É –Ω–∞–ø—Ä—è–º—É
if __name__ == '__main__':
    app = create_app()
    app.run(debug=True)
